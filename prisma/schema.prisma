// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Multi-tenant: Organizations (Bostadsrättsföreningar)
model Organization {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  subdomain   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       UserOrganization[]
  properties  Property[]
  units       Unit[]
  documents   Document[]
  issues      Issue[]

  @@map("organizations")
}

// Users
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  organizations UserOrganization[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

// Link table for users and organizations with roles
model UserOrganization {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  organizationId String       @db.ObjectId
  role           UserRole     @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("user_organizations")
}

// Properties (Fastigheter)
model Property {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  address        String
  organizationId String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  units          Unit[]

  @@map("properties")
}

// Units (Lägenheter)
model Unit {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  unitNumber     String
  floor          Int?
  size           Float?
  rooms          Int?
  propertyId     String       @db.ObjectId
  organizationId String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  property       Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("units")
}

// Documents
model Document {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  fileUrl        String
  fileType       String
  fileSize       Int
  organizationId String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Issues (Ärenden)
model Issue {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  status         IssueStatus  @default(OPEN)
  priority       IssuePriority @default(MEDIUM)
  organizationId String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("issues")
}

// Auth related models
model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enums
enum UserRole {
  ADMIN
  BOARD_MEMBER
  MEMBER
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
